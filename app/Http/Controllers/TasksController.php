<?php

namespace App\Http\Controllers;

use App\Models\Task;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class TasksController extends Controller
{
    /**
     * Afficher la liste des t√¢ches
     */
    public function index(Request $request)
    {
        $user = Auth::user();

        // üîé Requ√™te de base pour les t√¢ches actives de l'utilisateur
        $activeTasksQuery = Task::where('user_id', $user->id)
            ->where('completed', false);

        // üîç Requ√™te de base pour les t√¢ches termin√©es de l'utilisateur
        $completedTasksQuery = Task::where('user_id', $user->id)
            ->where('completed', true);

        // üîç Si une recherche est effectu√©e, appliquer le filtre aux deux requ√™tes
        if ($request->filled('search')) {
            $search = $request->search;

            $activeTasksQuery->where(function ($query) use ($search) {
                $query->where('title', 'like', '%' . $search . '%')
                      ->orWhere('description', 'like', '%' . $search . '%');
            });

            $completedTasksQuery->where(function ($query) use ($search) {
                $query->where('title', 'like', '%' . $search . '%')
                      ->orWhere('description', 'like', '%' . $search . '%');
            });
        }

        // üìÑ R√©cup√©ration des t√¢ches actives avec pagination
        $activeTasks = $activeTasksQuery
            ->orderBy('created_at', 'desc')
            ->paginate(5, ['*'], 'active_page');

        // ‚úÖ R√©cup√©ration des t√¢ches termin√©es avec pagination
        $completedTasks = $completedTasksQuery
            ->orderBy('completed_at', 'desc')
            ->paginate(5, ['*'], 'completed_page');

        // üì¶ On passe les deux jeux de donn√©es √† la vue
        return view('tasks.index', compact('activeTasks', 'completedTasks'));
    }

    /**
     * Afficher le formulaire de cr√©ation d'une t√¢che
     */
    public function create()
    {
        return view('tasks.create');
    }

    /**
     * Enregistrer une nouvelle t√¢che
     */
    public function store(Request $request)
    {
        // Validation des donn√©es
        $request->validate([
            'title' => 'required|max:255',
            'description' => 'nullable|max:1000',
        ]);

        Task::create([
            'title' => $request->title,
            'description' => $request->description,
            'user_id' => Auth::id(),
            'completed' => false,
        ]);

        return redirect()->route('tasks.index')
                        ->with('success', 'T√¢che cr√©√©e avec succ√®s !');
    }

    /**
     * Afficher le formulaire d'√©dition d'une t√¢che
     */
    public function edit(Task $task)
    {
        // V√©rifier que la t√¢che appartient √† l'utilisateur connect√©
        if ($task->user_id !== Auth::id()) {
            abort(403, 'Acc√®s non autoris√©');
        }

        return view('tasks.edit', compact('task'));
    }

    /**
     * Mettre √† jour une t√¢che
     */
    public function update(Request $request, Task $task)
    {
        // V√©rifier que la t√¢che appartient √† l'utilisateur connect√©
        if ($task->user_id !== Auth::id()) {
            abort(403, 'Acc√®s non autoris√©');
        }

        // Validation des donn√©es
        $request->validate([
            'title' => 'required|max:255',
            'description' => 'nullable|max:1000',
        ]);

        $task->update([
            'title' => $request->title,
            'description' => $request->description,
        ]);

        return redirect()->route('tasks.index')
                        ->with('success', 'T√¢che mise √† jour avec succ√®s !');
    }

    /**
     * Supprimer une t√¢che
     */
    public function destroy(Task $task)
    {
        // V√©rifier que la t√¢che appartient √† l'utilisateur connect√©
        if ($task->user_id !== Auth::id()) {
            abort(403, 'Acc√®s non autoris√©');
        }

        $task->delete();

        return redirect()->route('tasks.index')
                        ->with('success', 'T√¢che supprim√©e avec succ√®s !');
    }

    /**
     * Basculer le statut d'une t√¢che (termin√©e/non termin√©e)
     */
    public function toggle(Task $task)
    {
        // V√©rifier que la t√¢che appartient √† l'utilisateur connect√©
        if ($task->user_id !== Auth::id()) {
            abort(403, 'Acc√®s non autoris√©');
        }

        $task->update([
            'completed' => !$task->completed,
            'completed_at' => !$task->completed ? now() : null,
        ]);

        return redirect()->route('tasks.index')
                        ->with('success', 'Statut de la t√¢che mis √† jour !');
    }
}
